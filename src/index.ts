require("dotenv").config();

import { Bot, session } from "grammy";
import commands from "./commands";
import { gameStep, getLastStep, getPlan } from "./core/supabase/game";
import { checkSubscriptionByTelegramId, sendPaymentInfo } from "./core/supabase/payments";
import { getSupabaseUser, getUid, updateUser } from "./core/supabase/users";
import { development, production } from "./utils/launch";
import { conversations, createConversation } from "@grammyjs/conversations";
import { MyContextWithSession } from "./core/types";
import { customMiddleware } from "./utils/middleware";
import { report } from "./commands/report";

const bot = new Bot<MyContextWithSession>(process.env.BOT_TOKEN || "");

bot.use(session({ initial: () => ({}) }));
bot.api.setMyCommands([
    {
        command: "start",
        description: "üëã –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞",
    },
    {
        command: "/step",
        description: "Make a step",
    },
    {
        command: "/buy",
        description: "Buy a plan",
    },
]);

bot.use(conversations());
bot.use(createConversation(report));
bot.use(customMiddleware);
bot.use(commands);

bot.on("pre_checkout_query", (ctx) => {
    ctx.answerPreCheckoutQuery(true);
    return;
});

bot.on("message:successful_payment", async (ctx) => {
    const lang = ctx.from?.language_code === "ru";
    if (!ctx.from?.username) throw new Error("User not found");
    const textToPost = "üôèüèª Namaste";
    await ctx.reply(lang ? "ü§ù –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!" : "ü§ù Thank you for the purchase!");
    const user_id = await getUid(ctx.from?.username);
    if (!user_id) throw new Error("User not found");
    await sendPaymentInfo(user_id, ctx.message.successful_payment.invoice_payload);
    await ctx.api.sendMessage("-1002090264748", textToPost);
    return;
});

bot.on("callback_query:data", async (ctx) => {
    console.log(ctx.callbackQuery.data, "callback_query:data");
    await ctx.replyWithChatAction("typing");
    console.log(ctx);
    const callbackData = ctx.callbackQuery.data;
    const lang = ctx.from?.language_code === "ru";

    const subscription = await checkSubscriptionByTelegramId(ctx.from?.id.toString());
    if (callbackData.startsWith("make_step")) {
        console.log("step...");
        const roll = Math.floor(Math.random() * 6) + 1; // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ –æ—Ç 1 –¥–æ 6

        const user = await getSupabaseUser(ctx.from?.id.toString());
        if (subscription === "unsubscribed") {
            if (user?.first_request) {
                await ctx.reply(
                    lang
                        ? "üîí –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–∫–æ–π-–ª–∏–±–æ —É—Ä–æ–≤–µ–Ω—å. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. \n\n/buy - –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏ –æ—Ñ–æ—Ä–º–ª—è–π –ø–æ–¥–ø–∏—Å–∫—É"
                        : "üîí You are not subscribed to any level. The subscription is inactive. \n\n/buy - select a level and subscribe",
                );
                return;
            }
        }
        if (!user) return;
        if (user.isWrite) {
            console.log("user.isWrite 305", user.isWrite);
            const user_id = await getUid(ctx.from?.username || "");
            if (!user_id) throw new Error("User not found");
            const step = await getLastStep(user_id.toString());
            console.log("step 305", step);
            if (!step) return;
            console.log("don't return 305");
            const plan = await getPlan(step.loka, lang ? "ru" : "en");
            const directionMap: { [key: string]: { ru: string; en: string } } = {
                "stop üõë": { ru: "–°—Ç–æ–ø üõë", en: "Stop üõë" },
                "arrow üèπ": { ru: "–°—Ç—Ä–µ–ª–∞ üèπ", en: "Arrow üèπ" },
                "snake üêç": { ru: "–ó–º–µ—è üêç", en: "Snake üêç" },
                "win üïâ": { ru: "–ü–æ–±–µ–¥–∞ üïâ", en: "Win üïâ" },
                "step üö∂üèº": { ru: "–®–∞–≥ üö∂üèº", en: "Step üö∂üèº" },
            };

            const stepDirection = directionMap[step.direction][lang ? "ru" : "en"];
            const text = lang
                ? `<b>üîÆ –í—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –ø–ª–∞–Ω–µ ${step.loka} - ${plan.name} - ${stepDirection}</b>
    
    <i>üìú –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–ª–∞–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç—á–µ—Ç, –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥—É—Ö–æ–≤–Ω—É—é –º—É–¥—Ä–æ—Å—Ç—å –æ—Ç –≥—É—Ä—É –ò–òü§ñ</i>
    
    ${plan.short_desc}
    
    <b>‚ÄºÔ∏è –î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –∏–≥—Ä–∞ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è.</b>`
                : `<b>üîÆ You are standing on plan ${step.loka} - ${plan.name} - ${stepDirection}</b>
    
    <i>üìú Read the plan, write a report, and receive spiritual wisdom from the AI guru ü§ñ</i>
    
    ${plan.short_desc}
    
    <b>‚ÄºÔ∏è To write the report, you must reply to this message, otherwise the game will not continue.</b>`;
            if (plan.image) {
                await ctx.replyWithPhoto(plan.image, { caption: text, parse_mode: "HTML", reply_markup: { force_reply: true } });
                console.log("wait report");
                await ctx.conversation.enter("report");
                return;
            }
            await updateUser(ctx.from.id.toString(), { first_request: true });
            await ctx.reply(text, { parse_mode: "HTML" });
            console.log("wait report");
            await ctx.conversation.enter("report");
            return;
        }
        if (!ctx.from?.id) throw new Error("Telegram id not found");
        const user_id = await getUid(ctx.from?.username || "");
        if (!user_id) throw new Error("User not found");
        const lastStep = await getLastStep(user_id.toString());
        const step = await gameStep({ roll: roll, response: [lastStep], telegram_id: ctx.from?.id.toString() });
        console.log("step", step);
        if (!ctx.from.language_code) throw new Error("Language code not found");
        const plan = await getPlan(step.loka, ctx.from.language_code);
        console.log(plan, "plan");
        const directionMap: { [key: string]: { ru: string; en: string } } = {
            "stop üõë": { ru: "–°—Ç–æ–ø üõë", en: "Stop üõë" },
            "arrow üèπ": { ru: "–°—Ç—Ä–µ–ª–∞ üèπ", en: "Arrow üèπ" },
            "snake üêç": { ru: "–ó–º–µ—è üêç", en: "Snake üêç" },
            "win üïâ": { ru: "–ü–æ–±–µ–¥–∞ üïâ", en: "Win üïâ" },
            "step üö∂üèº": { ru: "–®–∞–≥ üö∂üèº", en: "Step üö∂üèº" },
        };

        const stepDirection = directionMap[step.direction][lang ? "ru" : "en"];
        const text = lang
            ? `<b>üîÆ –í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –ø–ª–∞–Ω ${step.loka}, –≤—ã–±—Ä–æ—Å–∏–≤ –Ω–∞ –∫—É–±–∏–∫–µ ${roll} - ${plan.name} - ${stepDirection}</b>
    
    <i>üìú –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–ª–∞–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç—á–µ—Ç, –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥—É—Ö–æ–≤–Ω—É—é –º—É–¥—Ä–æ—Å—Ç—å –æ—Ç –≥—É—Ä—É –ò–òü§ñ</i>
    
    ${plan.short_desc}
    
    <b>‚ÄºÔ∏è –î–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –∏–≥—Ä–∞ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è.</b>`
            : `<b>üîÆ You have moved to plan ${step.loka}, rolling a ${roll} on the dice - ${plan.name} - ${stepDirection}</b>
    
    <i>üìú Read the plan, write a report, and receive spiritual wisdom from the AI guru ü§ñ</i>
    
    ${plan.short_desc}
    
    <b>‚ÄºÔ∏è To write the report, you must reply to this message, otherwise the game will not continue.</b>`;
        if (plan.image) {
            await ctx.replyWithPhoto(plan.image, { caption: text, parse_mode: "HTML", reply_markup: { force_reply: true } });
            console.log("wait report");
            await ctx.conversation.enter("report");
            return;
        }
        await ctx.reply(text, { parse_mode: "HTML", reply_markup: { force_reply: true } });
        await updateUser(ctx.from.id.toString(), { isWrite: true, first_request: true });
        console.log("wait report");
        await ctx.conversation.enter("report");
        return;
    }
    if (callbackData.startsWith("buy")) {
        if (callbackData.endsWith("student")) {
            await ctx.replyWithInvoice(
                lang ? "–£—á–µ–Ω–∏–∫" : "Student",
                lang ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–£—á–µ–Ω–∏–∫'" : "You will receive a subscription to the 'Student' level",
                "student",
                "XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
                [{ label: "–¶–µ–Ω–∞", amount: 282 }],
            );
            return;
        }
        if (callbackData.endsWith("expert")) {
            await ctx.replyWithInvoice(
                lang ? "–≠–∫—Å–ø–µ—Ä—Ç" : "Expert",
                lang ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–≠–∫—Å–ø–µ—Ä—Ç'" : "You will receive a subscription to the 'Expert' level",
                "expert",
                "XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
                [{ label: "–¶–µ–Ω–∞", amount: 1978 }],
            );
            return;
        }
        if (callbackData.endsWith("mentor")) {
            await ctx.replyWithInvoice(
                lang ? "–ú–µ–Ω—Ç–æ—Ä" : "Mentor",
                lang ? "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É—Ä–æ–≤–Ω—è '–ú–µ–Ω—Ç–æ—Ä'" : "You will receive a subscription to the 'Mentor' level",
                "mentor",
                "XTR", // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª—é—Ç—É Telegram Stars
                [{ label: "–¶–µ–Ω–∞", amount: 19782 }],
            );
            return;
        }
    }
});
process.env.NODE_ENV === "development" ? development(bot) : production(bot);

export {};
